name: Build-LLVM-Dependence

# Controls when the workflow will run
on:
  workflow_dispatch:

env:
  CC: x86_64-w64-mingw32-gcc-posix
  CXX: x86_64-w64-mingw32-g++-posix
  WINDRES: x86_64-w64-mingw32-windres

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          echo Install dependencies...
          sudo apt-get update
          sudo apt-get install gcc-mingw-w64-x86-64-posix g++-mingw-w64-x86-64-posix mingw-w64 wine64 wine binutils-mingw-w64-x86-64 ninja-build ccache -y

      - name: x86_build-mingw-patch
        run: sudo bash my_scripts/x86_build-mingw-patch-mini.sh

      - name: Clone llvm
        run: git clone --depth=1 https://github.com/llvm/llvm-project

      - name: Configure
        run: |
          cd llvm-project
          mkdir -p build/install
          cd build
          cmake --version
          cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=/home/runner/work/mesa/mesa/.gitlab-ci/container/debian/x86_mingw-toolchain.cmake -DCMAKE_INSTALL_PREFIX=/home/runner/work/mesa/mesa/llvm-project/build/install -DCMAKE_BUILD_TYPE=Release -DCMAKE_CROSSCOMPILING=1 -DLLVM_ENABLE_RTTI=ON -DLLVM_ENABLE_PROJECTS="clang;libclc" -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_OPTIMIZED_TABLEGEN=TRUE -DLLVM_INCLUDE_UTILS=OFF -DLLVM_INCLUDE_RUNTIMES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_GO_TESTS=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_BUILD_LLVM_C_DYLIB=OFF -DLLVM_ENABLE_DIA_SDK=OFF -DCLANG_BUILD_TOOLS=ON ../llvm
#          cmake -G Ninja -DCMAKE_SYSTEM_NAME=Windows -DLLVM_TARGET_ARCH=X86 -DCMAKE_SYSTEM_PROCESSOR=x86_64 -DCMAKE_INSTALL_PREFIX=/home/runner/work/mesa/mesa/install -DLLDB_ENABLE_PYTHON=false -DLLVM_ENABLE_PROJECTS="clang;libclc" -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_CRT_RELEASE=MT -DLLVM_BUILD_TESTS=OFF -DLLDB_INCLUDE_TESTS=OFF -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_CROSSCOMPILING=ON -DCMAKE_CROSSCOMPILING_EMULATOR=wine ../llvm

      - name: Build
        run: |
          cd llvm-project/build/
          ninja

      - name: Install
        run: |
          cd llvm-project/build/
          ninja install
          ls -l

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.0.0
        with:
          name: builds
          path: llvm-project/build/install
